{"version":3,"sources":["store/constants.js","store/reducer.js","store/index.js","components/Search/Search.js","services/SCService.js","containers/SearchPage/SearchPage.js","store/actions.js","containers/PlayPage/PlayPage.js","containers/HistoryPage/HistoryPage.js","App.js","serviceWorker.js","index.js"],"names":["SET_SEARCH","SET_HISTORY","INITIAL_STATE","search","history","reducer","state","action","type","Object","assign","value","length","shift","push","store","createStore","props","onChange","searchChange","placeholder","onClick","searchClicked","nextClicked","SC","initialize","client_id","query","get","q","play","track_url","oEmbed","auto_play","then","console","log","SearchPage","tracks","page","event","setSearch","target","setState","prevState","index","results","slice","setHistory","SCService","Search","this","Component","connect","dispatch","PlayPage","HistoryPage","App","className","to","path","render","Boolean","window","location","hostname","match","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9d33b18.chunk.js","sourcesContent":["export const SET_SEARCH = 'SET_SEARCH';\r\nexport const SET_HISTORY = 'SET_HISTORY';\r\n// export const SET_PAGE = 'SET_PAGE';\r\n","import {\r\n  SET_SEARCH,\r\n  SET_HISTORY,\r\n  // SET_PAGE,\r\n} from './constants';\r\n\r\nconst INITIAL_STATE = {\r\n  search: '',\r\n  history: [],\r\n  // page: 0,\r\n}\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n  // console.log('reducer running', action);\r\n  switch (action.type) {\r\n    case SET_SEARCH:\r\n      return Object.assign({}, state, { search: action.value });\r\n\r\n    case SET_HISTORY:\r\n      var history = [...state.history];\r\n      if (history.length === 5) history.shift();\r\n      history.push(action.value);\r\n      // return Object.assign({}, state, { history: [...state.history, action.value] });\r\n      return Object.assign({}, state, { history: history });\r\n\r\n    // case SET_PAGE:\r\n    //   return Object.assign({}, state, { page: state.page + 1 });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst search = (props) => (\r\n  <div>\r\n    <input type=\"text\"\r\n      value={props.search}\r\n      onChange={props.searchChange}\r\n      placeholder=\"Search tracks...\" />\r\n    <button onClick={props.searchClicked}>Go</button>\r\n    <div>\r\n      <button onClick={props.nextClicked}>Next</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default search;\r\n","import SC from 'soundcloud';\r\n\r\nSC.initialize({\r\n  client_id: 'ggX0UomnLs0VmW7qZnCzw',\r\n});\r\n\r\nfunction query(search) {\r\n  return SC.get('/tracks', { q: search });\r\n}\r\n\r\nfunction play(track_url) {\r\n  SC.oEmbed(track_url, { auto_play: true }).then(function (oEmbed) {\r\n    console.log('oEmbed response: ', oEmbed);\r\n  });\r\n}\r\n\r\nexport default {\r\n  query,\r\n  play,\r\n}","import React, { Component } from 'react';\r\nimport Search from '../../components/Search/Search';\r\nimport { connect } from 'react-redux';\r\nimport SCService from '../../services/SCService';\r\n\r\nimport {\r\n  setSearch,\r\n  setHistory,\r\n  // setPage,\r\n} from '../../store/actions';\r\n\r\n\r\nclass SearchPage extends Component {\r\n  state = {\r\n    // search: ''\r\n    tracks: [],\r\n    page: 0,\r\n  }\r\n\r\n  searchChange = (event) => {\r\n    // this.setState({ search: event.target.value }, () => {\r\n    //   console.log(this.state.search);\r\n    // });\r\n    this.props.setSearch(event.target.value);\r\n  }\r\n\r\n  nextClicked = () => {\r\n    this.setState((prevState) => {\r\n      return { page: prevState.page + 1 }\r\n    }, () => {\r\n      // console.log(this.state.page)\r\n      var index = this.state.page * 6;\r\n      const results = this.state.tracks.slice(index, index + 6);\r\n      console.log(results);\r\n    });\r\n    // console.log(this.props.page);\r\n    // this.props.setPage();\r\n  }\r\n\r\n  searchClicked = () => {\r\n    console.log('SearchClicked');\r\n    // SCService.query(this.state.search)\r\n    this.props.setHistory(this.props.search);\r\n    SCService.query(this.props.search)\r\n      .then(tracks => {\r\n        this.setState({ tracks: tracks }, () => {\r\n          var index = this.state.page * 6;\r\n          // const results = tracks.slice(0, 6);\r\n          const results = this.state.tracks.slice(index, index + 6);\r\n          console.log(results);\r\n        });\r\n        // console.log(results[0].stream_url);\r\n        // SCService.play('http://soundcloud.com/forss/flickermood');\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>The Search Page</h1>\r\n        <Search\r\n          search={this.props.search}\r\n          searchChange={this.searchChange}\r\n          searchClicked={this.searchClicked}\r\n          nextClicked={this.nextClicked} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log('mapStateToProps', state);\r\n  return {\r\n    search: state.search,\r\n    history: state.history,\r\n    // page: state.page,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setSearch: (value) => { dispatch(setSearch(value)) },\r\n    setHistory: (value) => { dispatch(setHistory(value)) },\r\n    // setPage: () => { dispatch(setPage()) },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import {\r\n  SET_SEARCH,\r\n  SET_HISTORY,\r\n  // SET_PAGE,\r\n} from './constants';\r\n\r\nexport function setSearch(value) {\r\n  return {\r\n    type: SET_SEARCH,\r\n    value\r\n  }\r\n}\r\n\r\nexport function setHistory(value) {\r\n  return {\r\n    type: SET_HISTORY,\r\n    value\r\n  }\r\n}\r\n\r\n// export function setPage() {\r\n//   return {\r\n//     type: SET_PAGE,\r\n//   }\r\n// }\r\n","import React, { Component } from 'react';\r\n\r\nclass PlayPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>The Play Page</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PlayPage;\r\n","import React, { Component } from 'react';\r\n\r\nclass HistoryPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>The History Page</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default HistoryPage;\r\n","import React from 'react';\nimport { Route, Switch, NavLink } from 'react-router-dom';\n// import './App.css';\nimport store from './store';\nimport SearchPage from './containers/SearchPage/SearchPage';\nimport PlayPage from './containers/PlayPage/PlayPage';\nimport HistoryPage from './containers/HistoryPage/HistoryPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <NavLink to=\"/search\">Search</NavLink> |&nbsp;\n        <NavLink to=\"/play\">Play</NavLink> |&nbsp;\n        <NavLink to=\"/history\">History</NavLink>\n      </nav>\n      <Switch>\n        {/* <Route path=\"/search\" component={SearchPage} /> */}\n        <Route path='/search' render={(props) => <SearchPage store={store} {...props} />} />\n        {/* <Route path=\"/play\" component={PlayPage} /> */}\n        <Route path='/play' render={(props) => <PlayPage store={store} {...props} />} />\n        {/* <Route path=\"/history\" component={HistoryPage} /> */}\n        <Route path='/history' render={(props) => <HistoryPage store={store} {...props} />} />\n        <Route render={() => <h1>404 Error - Page Not found</h1>} />\n        {/* <Redirect from=\"/\" to=\"/search\" /> */}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst app = (\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}